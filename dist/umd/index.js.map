{"version":3,"file":"index.js","sources":["../../src/index.ts"],"sourcesContent":["import {\n    IState, IOption,\n    IPageNavQuery,\n    IPageCtx, IPageSlice, IPageRange, IRelPage, IRelPageCtx, IRecordCtx, ISpreadCtx, TSpreadCtx,\n    ICmpAttrQuery, ICmpAttr, ICmpBtnAttr, ICmpSelectAttr, ISelectEvt, TPageList,\n    TFn\n} from './type';\n\n/**\n * Usage:\n *      const list = ['a', 'b', 'c', 'd'];\n *\n *      const example = pgnHandle.getState(list, {\n *           page: 1,                       // optional starting page index\n *           increment: [100, 200, 300],    // used for <select>'s <option> (default 10 per page, i.e. [10])\n *           incrementIdx: 0,               // i.e. 100 per age\n *      });\n *\n *      const { startIdx, endIdx } = example;\n *      const listFor1stPage = list.slice(startIdx, endIdx);\n */\nexport class PgnHandle {\n    //// Option\n    /**\n     * Merge the updated option with existing option (either custom or default)\n     * e.g. existingOption = this.state.sortOption\n     */\n    getOption(modOption: Partial<IOption>, existingOption?: IOption): IOption {\n        const baseOption = existingOption ? existingOption : this.getDefOption();\n        return { ...baseOption, ...modOption };\n    }\n\n    getDefOption(): IOption {\n        return {\n            page: 0,\n            increment: [10],\n            incrementIdx: 0,\n            maxSpread: 3\n        };\n    }\n\n    //// Full State\n    getState(list: any[], pgnOption: Partial<IOption>): IState {\n        // Merge def. option with User's option\n        const defOption: IOption = this.getDefOption();\n        const { increment: [defIncrmVal] } = defOption;\n        const { page, increment, incrementIdx, maxSpread } = Object.assign(defOption, pgnOption);\n        let perPage: number = this.getNoPerPage(increment, incrementIdx, defIncrmVal);\n\n        // Skip if we only have 1 list item OR less than 2 pages\n        const totalRecord: number = list.length;\n        const defState: IState = this.getDefState(totalRecord, perPage);\n        if (totalRecord <= 1) return defState;\n        const totalPage: number = this.getTotalPage(totalRecord, perPage);\n        if (totalPage <= 1) return defState;\n\n        // Proceed as we have >=2 pages\n        const { curr, pageNo }: IPageCtx = this.getCurrPage(page, totalPage - 1);\n        const currSlice: IPageSlice = this.getPageSliceIdx(list, perPage, curr);\n        const { startIdx, endIdx } = currSlice;\n        const recordCtx = this.getRecordCtx(totalRecord, startIdx, endIdx);\n        const spreadCtx: ISpreadCtx = this.getSpreadCtx(pageNo, totalPage, maxSpread);\n        let relPage: IRelPage = this.getRelPage(totalPage, curr);\n        const relPageCtx: IRelPageCtx = this.getRelPageCtx({ curr, last: relPage.last }, relPage);\n        relPage = this.parseRelPage(relPage, relPageCtx);\n\n        return { curr, ...relPage, ...currSlice, pageNo, perPage, totalPage, ...recordCtx, ...spreadCtx };\n    }\n\n    getDefState(totalRecord: number, perPage: number): IState {\n        const startIdx: number = 0;\n        const recordCtx: IRecordCtx = this.getRecordCtx(totalRecord, startIdx);\n        return {\n            ...recordCtx,\n            perPage,\n            totalPage: 1,\n            startIdx,\n            pageNo: 1\n        } as IState;\n    }\n\n    //// Partial State\n    getRecordCtx(totalRecord: number, startIdx: number, endIdx?: number): IRecordCtx {\n        const hsRecord: boolean = totalRecord >= 1;\n        return {\n            startRecord: (hsRecord && Number.isInteger(startIdx)) ? startIdx + 1 : 0,\n            endRecord: (hsRecord && Number.isInteger(endIdx)) ? endIdx : totalRecord,\n            totalRecord\n        };\n    }\n\n    getNoPerPage(incrms: number[], incrmIdx: number, fallbackVal: number): number {\n        const hsIncrms: boolean = !!incrms.length;\n        if (!hsIncrms) return fallbackVal;\n\n        const incrm: number = incrms[incrmIdx];\n        const isValidIncrm: boolean = Number.isInteger(incrm) && incrm > 0;\n        const perPage: number = isValidIncrm ? incrms[incrmIdx] : fallbackVal;\n        return perPage;\n    }\n\n    parseNoPerPage(incrms: number[]): number[] {\n        return incrms.filter((incrm: number) => {\n            return Number.isInteger(incrm) && incrm > 0;\n        });\n    }\n\n    getTotalPage(lsLen: number, perPage: number): number {\n        const noOfPage: number = (lsLen > perPage) ? lsLen / perPage : 1;\n        return Math.ceil(noOfPage);\n    }\n\n    getCurrPage(page: number, lastPage: number): IPageCtx {\n        const curr: number = (page >= 0 && page <= lastPage) ? page : 0;\n        const pageNo: number = curr + 1;\n        return { curr, pageNo };\n    }\n\n    getRelPage(totalPage: number, currPage: number): IRelPage {\n        return {\n            first: 0,\n            prev: currPage - 1,\n            next: currPage + 1,\n            last: totalPage - 1\n        };\n    }\n\n    getRelPageCtx(pageRange: IPageRange, relPage: IRelPage): IRelPageCtx {\n        const relPageKeys = Object.getOwnPropertyNames(relPage) as (keyof IRelPage)[];\n        return relPageKeys.reduce((relPageCtx, type: string) => {\n            const pageQuery: IPageNavQuery = { type, target: relPage[type] };\n            relPageCtx[type] = this.canNavToPage(pageRange, pageQuery);\n            return relPageCtx;\n        }, {}) as IRelPageCtx;\n    }\n\n    parseRelPage(relPage: IRelPage, relPageCtx: IRelPageCtx): IRelPage {\n        const relPageKeys = Object.getOwnPropertyNames(relPage) as (keyof IRelPage)[];\n        relPageKeys.forEach((pageType: keyof IRelPage) => {\n            const page: number = relPage[pageType];\n            relPage[pageType] = relPageCtx[pageType] ? page : null;\n        });\n        return relPage;\n    }\n\n    getPageSliceIdx(list: any[], perPage: number, page: number): IPageSlice {\n        let startIdx: number = page * perPage;     // inclusive index\n        let endIdx: number = startIdx + perPage;      // exclusive index\n        startIdx = this.isDefined(list[startIdx]) ? startIdx : undefined;   // `undefined` is used as `null` cant be used as empty value in ES6\n        endIdx = this.isDefined(list[endIdx]) ? endIdx : undefined;\n        return { startIdx, endIdx };\n    }\n\n    /**\n     * Get the page number for the left/right spread in relation to current page\n     * - When remain < maxSpread, show `maxSpread` no. of pages\n     * - When remain > maxSpread, show dots (either on left/right) + `maxSpread` no. of pages\n     * - when remain < 1, no spread is available\n     *\n     * @param maxSpread: max no. of pages for each side of the spread\n     */\n    getSpreadCtx(currPageNo: number, totalPage: number, maxSpread: number = 3): ISpreadCtx {\n        // 1 is added to `spreadRange` in case there is '...' for either 1st/last item\n        const spreadRange: any[] = [...Array(maxSpread + 1)];\n        const firstPage: number = 1;\n        const DOTS = '...';\n\n        const rtTotalRemain: number = totalPage - currPageNo;\n        const ltTotalRemain: number = currPageNo - firstPage;\n        const hsRtSpread: boolean = rtTotalRemain > 1 && rtTotalRemain < totalPage;\n        const hsLtSpread: boolean = ltTotalRemain > 1 && ltTotalRemain < totalPage;\n\n        const rtSpread: TSpreadCtx = hsRtSpread ?\n            spreadRange.reduce((container: TSpreadCtx, item, idx: number) => {\n                const pageNo: number = currPageNo + idx + 1;\n\n                // We exclude the 1st page or last page since its already available in the Pagination state\n                const isInRange: boolean = pageNo > 1 && pageNo < totalPage;\n\n                // Check if there is any pages between \"last\" page number in this loop and the actual last page\n                // - e.g. last page in the loop is: 8 | actual last page is: 10,\n                // so we have page 9 in between, which we can use '...' to represent\n                const hsGtOnePageTilLastPage: boolean = idx === maxSpread && (totalPage - pageNo) >= 1;\n\n                if (isInRange) container.push(hsGtOnePageTilLastPage ? DOTS : pageNo);\n                return container;\n            }, []) :\n            null;\n\n        const ltSpread: TSpreadCtx = hsLtSpread ?\n            spreadRange.reduce((container: TSpreadCtx, item, idx: number) => {\n                const pageNo: number = currPageNo - idx - 1;\n                const isInRange: boolean = pageNo > 1 && pageNo < totalPage;\n                const hsGtOnePageTilFirstPage: boolean = idx === maxSpread && (currPageNo - pageNo) >= 1;\n                if (isInRange) container.unshift(hsGtOnePageTilFirstPage ? DOTS : pageNo);\n                return container;\n            }, []) :\n            null;\n\n        return { ltSpread, rtSpread, maxSpread };\n    }\n\n    /**\n     * Forumla for calculating corresponding page index for left/right spread '...' based on the\n     * context of current page and the maxSpread (no. of pages between current and target page)\n     *\n     * e.g. maxSpread = 3\n     * ------------------------------------------------------------\n     * Current Page          | Spread/Target Page    | Spread Type\n     * No.      | Index      | No.      | Index      |\n     * ------------------------------------------------------------\n     * 1          0            4          3            Right Spread\n     * 10         9            6          5            Left Spread\n     */\n    getPageIdxForSpread(currPageIdx: number, maxSpread: number, isLtSpread: boolean): number {\n        return isLtSpread ?\n            (currPageIdx - maxSpread - 1) :\n            (currPageIdx + maxSpread + 1) ;\n    }\n\n    //// Helper Methods\n    canNavToPage({ curr, last }: IPageRange, { type, target }: IPageNavQuery): boolean {\n        if (!this.isGteZero([curr, last])) return false;\n\n        switch (type) {\n            case 'prev':\n                // we dont need `target < curr` since we already know `target = curr - 1;`\n                return target >= 0;\n            case 'next':\n                // we dont need `target > curr` since we already know `target = curr + 1;`\n                return target <= last;\n            case 'first':\n                // we dont need `target > curr` since we already know `target = 0`\n                return curr !== 0 && target < curr;\n            case 'last':\n                return target > curr;\n            case 'page':\n                // i.e. any prev or next\n                return this.isGteZero(target) && target !== curr && target <= last;\n            default:\n                return false;\n        }\n    }\n\n    isDefined(val?: any): boolean {\n        return typeof val !== 'undefined';\n    }\n\n    isGteZero(vals: any | any[]): boolean {\n        return Array.isArray(vals) ?\n            vals.every((val: any) => (Number.isInteger(val) && val >= 0)) :\n            Number.isInteger(vals) && vals >= 0;\n    }\n\n    //// Generic UI Component Related\n    /**\n     * Create Generic Attributes that can be passed/mapped to Attributes/Inputs/Props of Static HTML or Angular/React/Vue/etc Components\n     *\n     * - Usage Example for React:\n     * const callback = (modState => this.setState({...this.state, ...modState})).bind(this);\n     * createGenericCmpProps({option, state, data, callback});\n     */\n    createGenericCmpAttr({ data, option, state, callback }: ICmpAttrQuery): ICmpAttr {\n        const { first, prev, next, last, ltSpread, rtSpread } = state;\n        const onEvt: TFn = this.getGenericCmpEvtHandler(data, option, callback);\n\n        return {\n            // Attr. for First/Prev/Next/Last as Button\n            firstBtnAttr: this.getTextBtnAttr(onEvt, ['first', first]),\n            prevBtnAttr: this.getTextBtnAttr(onEvt, ['prev', prev]),\n            nextBtnAttr: this.getTextBtnAttr(onEvt, ['next', next]),\n            lastBtnAttr: this.getTextBtnAttr(onEvt, ['last', last]),\n\n            // Attr. for Spread as Button\n            ltSpreadBtnsAttr: ltSpread ?\n                ltSpread.map((page: number) => this.getSpreadBtnAttr(onEvt, state, [page, true])) :\n                null,\n            rtSpreadBtnsAttr: rtSpread ?\n                rtSpread.map((page: number) => this.getSpreadBtnAttr(onEvt, state, [page, false])) :\n                null,\n\n            // Attr. for Page Select and Per Page Select\n            perPageSelectAttr: this.getPerPageSelectAttr(onEvt, option),\n            pageSelectAttr: this.getPageSelectAttr(onEvt, state),\n        };\n    }\n\n    getTextBtnAttr(onEvt: TFn, [title, pageIdx]: [string, number]): ICmpBtnAttr {\n        return {\n            title,\n            disabled: !Number.isInteger(pageIdx),\n            onClick: () => onEvt({\n                page: pageIdx\n            })\n        };\n    }\n\n    getSpreadBtnAttr(onEvt: TFn, state: IState, [page, isLtSpread]: [any, boolean]): ICmpBtnAttr {\n        const { curr, maxSpread } = state;\n\n        // If the page is not a number, then its likely dots '...' so page is jumped by an interval of `maxSpread`\n        // - e.g. maxSpread = 3, currPageNo = 6\n        // then the page is jumped to 2 (eqv. to page index of 3)\n        const isNum: boolean = typeof page === 'number';\n        // const pageIdx = isNum ? page - 1 : curr;\n        const targetPageIdx: number = isLtSpread ?\n            (isNum ? curr - 1 : this.getPageIdxForSpread(curr, maxSpread, true) ):\n            (isNum ? curr + 1 : this.getPageIdxForSpread(curr, maxSpread, false));\n\n        return {\n            title: isNum ? page : (isLtSpread ? 'left-spread' : 'right-spread'),\n            isSpread: !isNum,\n            onClick: () => onEvt({\n                page: targetPageIdx\n            })\n        };\n    }\n\n    getPageSelectAttr(onEvt: TFn, state: IState): ICmpSelectAttr {\n        const { pageNo, totalPage, ltSpread, rtSpread } = state;\n\n        const isLteOnePage: boolean = totalPage <= 1;\n\n        // Options (inclusive of all pages here)\n        const leftOptions: TPageList = (isLteOnePage || pageNo === 1) ?\n            [ 1 ] :\n            [ 1, ...(ltSpread ? ltSpread : []), pageNo ];\n\n        const rightOptions: TPageList = (isLteOnePage || pageNo === totalPage) ?\n            [] :\n            [ ...(rtSpread ? rtSpread : []), totalPage ];\n\n        const options: TPageList = [ ...leftOptions, ...rightOptions ];\n        const selectedOptionIdx: number = leftOptions.length - 1;\n\n        return {\n            title: 'page select',\n            disabled: isLteOnePage,\n            options,\n            selectedOptionValue: pageNo,\n            selectedOptionIdx,\n            onSelect: ({ target }: ISelectEvt) => {\n                const targetPageIdx: number = this.getTargetPageIdxByPos(\n                    state,\n                    options,\n                    [ parseInt(target.value, 10), selectedOptionIdx ]\n                );\n                onEvt({ page: targetPageIdx });\n            }\n        };\n    }\n\n    getPerPageSelectAttr(onEvt: TFn, option: IOption): ICmpSelectAttr {\n        const { increment, incrementIdx } = option;\n        return {\n            title: 'per page select',\n            disabled: increment.length <= 1,\n            options: increment,\n            selectedOptionValue: increment[incrementIdx],\n            selectedOptionIdx: incrementIdx,\n            onSelect: ({ target }: ISelectEvt) => onEvt({\n                page: 0,\n                incrementIdx: parseInt(target.value, 10)\n            })\n        };\n    }\n\n    getGenericCmpEvtHandler(data: any[], option: IOption, callback?: TFn): TFn {\n        return ((modOption: Partial<IOption>): void => {\n            const pgnOption: IOption = this.getOption(modOption, option);\n            const pgnState: IState = this.getState(data, pgnOption);\n            if (callback) callback({ pgnOption, pgnState });\n        });\n    }\n\n    getTargetPageIdxByPos(state: IState, pages: TPageList, [currPos, activePos]: [number, number]): number {\n        const { curr, maxSpread } = state;\n        const page: string | number = pages[currPos];\n        const targetPageIdx: number = typeof page === 'number' ?\n            page - 1 :\n            this.getPageIdxForSpread(curr, maxSpread, currPos < activePos);\n        return targetPageIdx;\n    }\n}"],"names":["PgnHandle","modOption","existingOption","baseOption","getDefOption","page","increment","incrementIdx","maxSpread","list","pgnOption","defOption","defIncrmVal","Object","assign","perPage","getNoPerPage","totalRecord","length","defState","getDefState","totalPage","getTotalPage","getCurrPage","curr","pageNo","currSlice","getPageSliceIdx","startIdx","endIdx","recordCtx","getRecordCtx","spreadCtx","getSpreadCtx","relPage","getRelPage","relPageCtx","getRelPageCtx","last","parseRelPage","hsRecord","startRecord","Number","isInteger","endRecord","incrms","incrmIdx","fallbackVal","hsIncrms","incrm","isValidIncrm","filter","lsLen","noOfPage","Math","ceil","lastPage","currPage","first","prev","next","pageRange","relPageKeys","getOwnPropertyNames","reduce","type","pageQuery","target","canNavToPage","forEach","pageType","isDefined","undefined","currPageNo","spreadRange","Array","firstPage","DOTS","rtTotalRemain","ltTotalRemain","hsRtSpread","hsLtSpread","rtSpread","container","item","idx","isInRange","hsGtOnePageTilLastPage","push","ltSpread","hsGtOnePageTilFirstPage","unshift","currPageIdx","isLtSpread","isGteZero","val","vals","isArray","every","data","option","state","callback","onEvt","getGenericCmpEvtHandler","firstBtnAttr","getTextBtnAttr","prevBtnAttr","nextBtnAttr","lastBtnAttr","ltSpreadBtnsAttr","map","getSpreadBtnAttr","rtSpreadBtnsAttr","perPageSelectAttr","getPerPageSelectAttr","pageSelectAttr","getPageSelectAttr","title","pageIdx","disabled","onClick","isNum","targetPageIdx","getPageIdxForSpread","isSpread","isLteOnePage","leftOptions","rightOptions","options","selectedOptionIdx","selectedOptionValue","onSelect","getTargetPageIdxByPos","parseInt","value","getOption","pgnState","getState","pages","currPos","activePos"],"mappings":"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"}